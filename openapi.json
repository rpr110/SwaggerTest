{
    "openapi":"3.0.2",
    "info":{
       "title":"N-Face",
       "description":"\n## Introduction\nThe N-Face API enables Service Providers to verify their clients/customers authenticate using their faces.\n\nThis API consists of 3 methods namely:\n\n- Face Comparison: This method is used to compare a live image of a user with an image stored in the bank database in order to check if the two images have the same person in them.\n- Liveness Detection: This method is used to confirm if the image sent by the user is live (ie. not a photograph/mask/recording of the customer).\n- Face Authentication: This method is just the combination of the above 2 methods.\n\n## Usage\n\n### BVN\nBVN is a unique identification number that can be verified across all financial institutions in Nigeria. A customer’s BVN is mapped to the individual’s biological traits namely: * Finger Print * Signature * Facial photograph captured at the point of enrollment. The APIs may require the developer to send in the BVN in 'string' format.\n\n### License Key\nEach Service Provider using these APIs will be provided with a license key that will govern the permissions associated to the Service Provider and the period for how long the Service Provider can use these APIs\nThe permissions governed by the License Key are:\n- Permission to perform Face Comparison\n- Permission to perform Passive Liveness Detection\n\nYour License Key will be shared with you via Email\n\n### HMAC Hash\nHMAC  is a specific type of message authentication code (MAC) involving a cryptographic hash function and a secret cryptographic key. As with any MAC, it may be used to simultaneously verify both the data integrity and authenticity of a message.\n\nWhile creating the request (for any of N-Face's APIs), you will need to hash the JSON body payload against a hmac-key sent to you via email to generate the HMAC Hash. This HMAC hash then needs to be added as a value to a Header named 'X-pekla-signature'\n\nHere is a sample python code as to how to generate the hmac hash\n\n```\nimport hashlib\nimport hmac\ndef hmac_hash(key:str ,msg:str) -> str:\n    return hmac.new(key.encode('utf-8'), msg.encode('utf-8'), hashlib.sha256).hexdigest()\n```\n\n### Base64 Image Strings\nBase64 is a group of binary-to-text encoding schemes that represent binary data.\nThe images being sent to the APIs must be in the form of a 'Base64 String' (ie. 'Not File data' (or) 'Base64 Bytes')\n\n## Response Codes\n**HTTP status codes:**\n\nThese are 3-digit responses issued by the server. They are standard responses and can be easily interpreted based on their first digits.\n\n**2XX** - Success of some kind\n\n**4XX** - Error occurred on the client’s part\n\n**5XX** - Error occurred in the server’s part\n\n**The codes for this API include:**\n\n**200** - OK\n\n**201** - Created\n\n**202** - Accepted (Request accepted, and queued for execution)\n\n**400** - Bad request\n\n**401** - Authentication failure\n\n**403** - Forbidden\n\n**404** - Resource not found\n\n**405** - Method Not Allowed\n\n**409** - Conflict\n\n**412** - Precondition Failed\n\n**413** - Request Entity Too Large\n\n**424** - Failed dependency\n\n**500** - Internal Server Error\n\n**501** - Not Implemented\n\n**503** - Service Unavailable\n",
       "termsOfService":"http://example.com/terms/",
       "contact":{
          "name":"NIBSS Technology Development",
          "email":"technologydevelopment@nibss-plc.com.ng"
       },
       "version":"0.0.1"
    },
    "paths":{
       "/pekla/n-face/api/v1/face_authentication":{
          "post":{
             "tags":[
                "Face APIs"
             ],
             "summary":"Face Authentication",
             "operationId":"face_authentication_pekla_n_face_api_v1_face_authentication_post",
             "parameters":[
                {
                   "required":true,
                   "schema":{
                      "title":"X-Pekla-Signature",
                      "type":"string"
                   },
                   "name":"X-pekla-signature",
                   "in":"header"
                }
             ],
             "requestBody":{
                "content":{
                   "application/json":{
                      "schema":{
                         "$ref":"#/components/schemas/FaceAuthenticationRequestBody"
                      }
                   }
                },
                "required":true
             },
             "responses":{
                "200":{
                   "description":"Successful Response",
                   "content":{
                      "application/json":{
                         "schema":{
                            
                         }
                      }
                   }
                },
                "400":{
                   "description":"Issue With Image",
                   "content":{
                      "application/json":{
                         "schema":{
                            "$ref":"#/components/schemas/BasicMessage"
                         }
                      }
                   }
                },
                "403":{
                   "description":"Invalid License Key / Issue with HMAC",
                   "content":{
                      "application/json":{
                         "schema":{
                            "$ref":"#/components/schemas/BasicMessage"
                         }
                      }
                   }
                },
                "404":{
                   "description":"Invalid License Key",
                   "content":{
                      "application/json":{
                         "schema":{
                            "$ref":"#/components/schemas/BasicMessage"
                         }
                      }
                   }
                },
                "422":{
                   "description":"Validation Error",
                   "content":{
                      "application/json":{
                         "schema":{
                            "$ref":"#/components/schemas/HTTPValidationError"
                         }
                      }
                   }
                },
                "500":{
                   "description":"Server Issue / Issue Performing Face Comparison",
                   "content":{
                      "application/json":{
                         "schema":{
                            "$ref":"#/components/schemas/BasicMessage"
                         }
                      }
                   }
                }
             }
          }
       }
    },
    "components":{
       "schemas":{
          "BasicMessage":{
             "title":"BasicMessage",
             "required":[
                "detail"
             ],
             "type":"object",
             "properties":{
                "detail":{
                   "title":"Detail",
                   "type":"string"
                }
             }
          },
          "FaceAuthenticationRequestBody":{
             "title":"FaceAuthenticationRequestBody",
             "required":[
                "bvn",
                "image",
                "license_key"
             ],
             "type":"object",
             "properties":{
                "bvn":{
                   "title":"Bvn",
                   "type":"string"
                },
                "image":{
                   "title":"Image",
                   "type":"string"
                },
                "license_key":{
                   "title":"License Key",
                   "maxLength":36,
                   "minLength":36,
                   "type":"string"
                }
             }
          },
          "HTTPValidationError":{
             "title":"HTTPValidationError",
             "type":"object",
             "properties":{
                "detail":{
                   "title":"Detail",
                   "type":"array",
                   "items":{
                      "$ref":"#/components/schemas/ValidationError"
                   }
                }
             }
          },
          "ValidationError":{
             "title":"ValidationError",
             "required":[
                "loc",
                "msg",
                "type"
             ],
             "type":"object",
             "properties":{
                "loc":{
                   "title":"Location",
                   "type":"array",
                   "items":{
                      "anyOf":[
                         {
                            "type":"string"
                         },
                         {
                            "type":"integer"
                         }
                      ]
                   }
                },
                "msg":{
                   "title":"Message",
                   "type":"string"
                },
                "type":{
                   "title":"Error Type",
                   "type":"string"
                }
             }
          }
       }
    }
 }
